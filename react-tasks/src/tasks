<!-- Tea Display: -->
Basic Static Component: Create a new React component named TeaDisplay. In the component, hardcode details about a specific type of tea, such as its name, origin, and description.


Dynamic Component: Update the TeaDisplay component to accept props like name, origin, and description. Replace the hardcoded data in the component with the props values. From a parent component (e.g., App.js), pass different sets of tea data to TeaDisplay to ensure it updates correctly.


In your parent component, create an array of tea objects, each containing name, origin, and description. Use the .map() JavaScript method to iterate over the array and render a TeaDisplay component for each tea object, passing the tea data as props.


<!-- Menu Item:  -->
Create a new React component named MenuItem. Hardcode details about a specific menu item, such as its name, price, and a brief description.


Update the MenuItem component to accept props like name, price, and description. Replace the hardcoded information with props values in the JSX returned by the component. From a parent component (like App.js), pass various menu item details to the MenuItem to ensure it renders the new data correctly.


In the parent component, define an array containing multiple menu item objects, each with name, price, and description. Utilize the .map() method to iterate over the array and render a MenuItem component for each object, passing the menu data as props.


<!-- Toggle Button -->
Create a React component with a button that toggles between two states (e.g., "On" and "Off"). Name this component ToggleButton. Use useState to manage whether the button is in the "On" or "Off" state. When the button is clicked, toggle the state between "On" and "Off". The button should display the current state as its text.


<!-- Counter -->

Develop a component that includes a button to increment a counter and display the current count. Name this component Counter. Initialize a state variable with a starting count of 0. Include a button that, when clicked, increases the count by 1. Show the current count next to the button.



<!-- Form Input and Display -->


Build a component with a text input field where users can type their name and a button to submit. Upon submission, display the name below. Name this component NameForm. Use useState to store the value entered in the text input. Include a submit button that when clicked, displays the typed name below the input field. Show the submitted name dynamically below the input field.
